services:
  airflow-init:
    image: apache/airflow:2.10.5
    container_name: airflow-init
    env_file:
      - .env
    depends_on:
      - postgres
    command: >
      bash -c "
        airflow db migrate &&
        airflow db init &&
        airflow users create --username ${AIRFLOW_WWW_USER_USERNAME} --password ${AIRFLOW_WWW_USER_PASSWORD} --firstname admin --lastname admin --role Admin --email ${AIRFLOW_EMAIL}"

  airflow-webserver:
    image: apache/airflow:2.10.5
    env_file:
      - .env
    container_name: airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "18080:8080"
    command: airflow webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    image: apache/airflow:2.10.5
    env_file:
      - .env
    user: root
    group_add:
      - "999"
    container_name: airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    command: airflow scheduler
    healthcheck:
      # test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-db:
    image: postgres:13
    container_name: airflow-db
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    ports:
      - "25433:5432"
    volumes:
      - airflow-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"] # 확인
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 30s
      retries: 5
      start_period: 5s
      # test: ["CMD", "nc", "-z", "localhost", "2181"]

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9093:9092"  # 호스트에서 접근할 때 포트 9093 사용
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka1:29092", "--list"]
      interval: 30s
      retries: 5
      start_period: 5s


  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9094:9092"  # 호스트에서 접근할 때 포트 9094 사용
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29092,PLAINTEXT_HOST://localhost:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka2:29092", "--list"]
      interval: 30s
      retries: 5
      start_period: 5s


  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9095:9092"  # 호스트에서 접근할 때 포트 9095 사용
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29092,PLAINTEXT_HOST://localhost:9095
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka3:29092", "--list"]
      interval: 30s
      retries: 5
      start_period: 5s


  # kafka-cli:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka-cli
  #   depends_on:
  #     - kafka1
  #     - kafka2
  #     - kafka3
  #     - zookeeper
  #   volumes:
  #     - ./kafka:/opt/kafka  # 호스트의 ./kafka-cli 디렉터리를 컨테이너의 /opt/kafka에 마운트
  #   command: tail -f /dev/null

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${DATA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DATA_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DATA_POSTGRES_DB}
    ports:
      - "15432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
    command: tail -f /dev/null
    volumes:
      - ./producer:/app

  consumer:
    build: ./consumer
    container_name: consumer
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29092,kafka3:29092
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${DATA_POSTGRES_DB}
      POSTGRES_USER: ${DATA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DATA_POSTGRES_PASSWORD}
    command: tail -f /dev/null
    volumes:
      - ./consumer:/app
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka1:29092,kafka2:29092,kafka3:29092 --list"]
      interval: 10s
      retries: 10


  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:29092,kafka2:29092,kafka3:29092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  
  redis:
    image: redis:7.4
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 5s


  spark:
    build: ./spark
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_UI_PORT=4040
      - SPARK_LOG_LEVEL=INFO
    ports:
      - "4040:4040"
    volumes:
      - ./spark:/opt/spark-apps
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  fastapi:
    build: ./fastapi
    container_name: fastapi
    ports:
      - "8000:8000"
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./fastapi:/app

  streamlit:
    build: ./streamlit
    container_name: streamlit
    ports:
      - "8501:8501"
    depends_on:
      - fastapi
    environment:
      API_URL: "http://fastapi:8000"
    volumes:
      - ./streamlit:/app
volumes:
  pgdata:
  airflow-pgdata:
  redis-data: